// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using flights.Entity;

namespace flights.Context
{
    public partial class FlightsystemdbContext : DbContext
    {
        public FlightsystemdbContext()
        {
        }

        public FlightsystemdbContext(DbContextOptions<FlightsystemdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<ProjectRole> ProjectRoles { get; set; }
        public virtual DbSet<airline> airlines { get; set; }
        public virtual DbSet<airplane> airplanes { get; set; }
        public virtual DbSet<country> countries { get; set; }
        public virtual DbSet<flight> flights { get; set; }
        public virtual DbSet<ticket> tickets { get; set; }
        public virtual DbSet<visitor> visitors { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=FlightSystemDB;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.User_Name).HasDefaultValueSql("(N'')");

                entity.Property(e => e.card_number).HasDefaultValueSql("(N'')");

                entity.Property(e => e.passport).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<airplane>(entity =>
            {
                entity.Property(e => e.RegisterationNumber).ValueGeneratedNever();

                entity.HasOne(d => d.FlightNumberNavigation)
                    .WithMany(p => p.airplanes)
                    .HasForeignKey(d => d.FlightNumber)
                    .HasConstraintName("FK_airplanes_flights_FlightNumber1");
            });

            modelBuilder.Entity<flight>(entity =>
            {
                entity.HasOne(d => d.Country)
                    .WithMany(p => p.flights)
                    .HasForeignKey(d => d.CountryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_flights_countries");
            });

            modelBuilder.Entity<ticket>(entity =>
            {
                entity.HasOne(d => d.FlightNumberNavigation)
                    .WithMany(p => p.tickets)
                    .HasForeignKey(d => d.FlightNumber)
                    .HasConstraintName("FK_tickets_flights_FlightNumber1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.tickets)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tickets_AspNetUsers");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}